// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/otakakot/go-orm-s/gen/ent/entuser"
	"github.com/otakakot/go-orm-s/gen/ent/entusername"
	"github.com/otakakot/go-orm-s/gen/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEntUser     = "EntUser"
	TypeEntUserName = "EntUserName"
)

// EntUserMutation represents an operation that mutates the EntUser nodes in the graph.
type EntUserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	created_at            *time.Time
	updated_at            *time.Time
	deleted               *bool
	clearedFields         map[string]struct{}
	ent_user_names        map[uuid.UUID]struct{}
	removedent_user_names map[uuid.UUID]struct{}
	clearedent_user_names bool
	done                  bool
	oldValue              func(context.Context) (*EntUser, error)
	predicates            []predicate.EntUser
}

var _ ent.Mutation = (*EntUserMutation)(nil)

// entuserOption allows management of the mutation configuration using functional options.
type entuserOption func(*EntUserMutation)

// newEntUserMutation creates new mutation for the EntUser entity.
func newEntUserMutation(c config, op Op, opts ...entuserOption) *EntUserMutation {
	m := &EntUserMutation{
		config:        c,
		op:            op,
		typ:           TypeEntUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntUserID sets the ID field of the mutation.
func withEntUserID(id uuid.UUID) entuserOption {
	return func(m *EntUserMutation) {
		var (
			err   error
			once  sync.Once
			value *EntUser
		)
		m.oldValue = func(ctx context.Context) (*EntUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntUser sets the old EntUser of the mutation.
func withEntUser(node *EntUser) entuserOption {
	return func(m *EntUserMutation) {
		m.oldValue = func(context.Context) (*EntUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EntUser entities.
func (m *EntUserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntUserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntUserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EntUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EntUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EntUser entity.
// If the EntUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EntUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EntUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EntUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the EntUser entity.
// If the EntUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EntUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *EntUserMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *EntUserMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the EntUser entity.
// If the EntUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntUserMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *EntUserMutation) ResetDeleted() {
	m.deleted = nil
}

// AddEntUserNameIDs adds the "ent_user_names" edge to the EntUserName entity by ids.
func (m *EntUserMutation) AddEntUserNameIDs(ids ...uuid.UUID) {
	if m.ent_user_names == nil {
		m.ent_user_names = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.ent_user_names[ids[i]] = struct{}{}
	}
}

// ClearEntUserNames clears the "ent_user_names" edge to the EntUserName entity.
func (m *EntUserMutation) ClearEntUserNames() {
	m.clearedent_user_names = true
}

// EntUserNamesCleared reports if the "ent_user_names" edge to the EntUserName entity was cleared.
func (m *EntUserMutation) EntUserNamesCleared() bool {
	return m.clearedent_user_names
}

// RemoveEntUserNameIDs removes the "ent_user_names" edge to the EntUserName entity by IDs.
func (m *EntUserMutation) RemoveEntUserNameIDs(ids ...uuid.UUID) {
	if m.removedent_user_names == nil {
		m.removedent_user_names = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.ent_user_names, ids[i])
		m.removedent_user_names[ids[i]] = struct{}{}
	}
}

// RemovedEntUserNames returns the removed IDs of the "ent_user_names" edge to the EntUserName entity.
func (m *EntUserMutation) RemovedEntUserNamesIDs() (ids []uuid.UUID) {
	for id := range m.removedent_user_names {
		ids = append(ids, id)
	}
	return
}

// EntUserNamesIDs returns the "ent_user_names" edge IDs in the mutation.
func (m *EntUserMutation) EntUserNamesIDs() (ids []uuid.UUID) {
	for id := range m.ent_user_names {
		ids = append(ids, id)
	}
	return
}

// ResetEntUserNames resets all changes to the "ent_user_names" edge.
func (m *EntUserMutation) ResetEntUserNames() {
	m.ent_user_names = nil
	m.clearedent_user_names = false
	m.removedent_user_names = nil
}

// Where appends a list predicates to the EntUserMutation builder.
func (m *EntUserMutation) Where(ps ...predicate.EntUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntUser).
func (m *EntUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntUserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, entuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, entuser.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, entuser.FieldDeleted)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entuser.FieldCreatedAt:
		return m.CreatedAt()
	case entuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case entuser.FieldDeleted:
		return m.Deleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case entuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case entuser.FieldDeleted:
		return m.OldDeleted(ctx)
	}
	return nil, fmt.Errorf("unknown EntUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case entuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case entuser.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown EntUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EntUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EntUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntUserMutation) ResetField(name string) error {
	switch name {
	case entuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case entuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case entuser.FieldDeleted:
		m.ResetDeleted()
		return nil
	}
	return fmt.Errorf("unknown EntUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ent_user_names != nil {
		edges = append(edges, entuser.EdgeEntUserNames)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entuser.EdgeEntUserNames:
		ids := make([]ent.Value, 0, len(m.ent_user_names))
		for id := range m.ent_user_names {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedent_user_names != nil {
		edges = append(edges, entuser.EdgeEntUserNames)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case entuser.EdgeEntUserNames:
		ids := make([]ent.Value, 0, len(m.removedent_user_names))
		for id := range m.removedent_user_names {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedent_user_names {
		edges = append(edges, entuser.EdgeEntUserNames)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntUserMutation) EdgeCleared(name string) bool {
	switch name {
	case entuser.EdgeEntUserNames:
		return m.clearedent_user_names
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown EntUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntUserMutation) ResetEdge(name string) error {
	switch name {
	case entuser.EdgeEntUserNames:
		m.ResetEntUserNames()
		return nil
	}
	return fmt.Errorf("unknown EntUser edge %s", name)
}

// EntUserNameMutation represents an operation that mutates the EntUserName nodes in the graph.
type EntUserNameMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	value           *string
	created_at      *time.Time
	updated_at      *time.Time
	deleted         *bool
	clearedFields   map[string]struct{}
	ent_user        *uuid.UUID
	clearedent_user bool
	done            bool
	oldValue        func(context.Context) (*EntUserName, error)
	predicates      []predicate.EntUserName
}

var _ ent.Mutation = (*EntUserNameMutation)(nil)

// entusernameOption allows management of the mutation configuration using functional options.
type entusernameOption func(*EntUserNameMutation)

// newEntUserNameMutation creates new mutation for the EntUserName entity.
func newEntUserNameMutation(c config, op Op, opts ...entusernameOption) *EntUserNameMutation {
	m := &EntUserNameMutation{
		config:        c,
		op:            op,
		typ:           TypeEntUserName,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntUserNameID sets the ID field of the mutation.
func withEntUserNameID(id uuid.UUID) entusernameOption {
	return func(m *EntUserNameMutation) {
		var (
			err   error
			once  sync.Once
			value *EntUserName
		)
		m.oldValue = func(ctx context.Context) (*EntUserName, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntUserName.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntUserName sets the old EntUserName of the mutation.
func withEntUserName(node *EntUserName) entusernameOption {
	return func(m *EntUserNameMutation) {
		m.oldValue = func(context.Context) (*EntUserName, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntUserNameMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntUserNameMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EntUserName entities.
func (m *EntUserNameMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntUserNameMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntUserNameMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntUserName.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *EntUserNameMutation) SetUserID(u uuid.UUID) {
	m.ent_user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *EntUserNameMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.ent_user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the EntUserName entity.
// If the EntUserName object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntUserNameMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *EntUserNameMutation) ResetUserID() {
	m.ent_user = nil
}

// SetValue sets the "value" field.
func (m *EntUserNameMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *EntUserNameMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the EntUserName entity.
// If the EntUserName object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntUserNameMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *EntUserNameMutation) ResetValue() {
	m.value = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EntUserNameMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EntUserNameMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EntUserName entity.
// If the EntUserName object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntUserNameMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EntUserNameMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EntUserNameMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EntUserNameMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the EntUserName entity.
// If the EntUserName object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntUserNameMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EntUserNameMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *EntUserNameMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *EntUserNameMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the EntUserName entity.
// If the EntUserName object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntUserNameMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *EntUserNameMutation) ResetDeleted() {
	m.deleted = nil
}

// SetEntUserID sets the "ent_user" edge to the EntUser entity by id.
func (m *EntUserNameMutation) SetEntUserID(id uuid.UUID) {
	m.ent_user = &id
}

// ClearEntUser clears the "ent_user" edge to the EntUser entity.
func (m *EntUserNameMutation) ClearEntUser() {
	m.clearedent_user = true
}

// EntUserCleared reports if the "ent_user" edge to the EntUser entity was cleared.
func (m *EntUserNameMutation) EntUserCleared() bool {
	return m.clearedent_user
}

// EntUserID returns the "ent_user" edge ID in the mutation.
func (m *EntUserNameMutation) EntUserID() (id uuid.UUID, exists bool) {
	if m.ent_user != nil {
		return *m.ent_user, true
	}
	return
}

// EntUserIDs returns the "ent_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EntUserID instead. It exists only for internal usage by the builders.
func (m *EntUserNameMutation) EntUserIDs() (ids []uuid.UUID) {
	if id := m.ent_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEntUser resets all changes to the "ent_user" edge.
func (m *EntUserNameMutation) ResetEntUser() {
	m.ent_user = nil
	m.clearedent_user = false
}

// Where appends a list predicates to the EntUserNameMutation builder.
func (m *EntUserNameMutation) Where(ps ...predicate.EntUserName) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntUserNameMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntUserNameMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntUserName, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntUserNameMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntUserNameMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntUserName).
func (m *EntUserNameMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntUserNameMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.ent_user != nil {
		fields = append(fields, entusername.FieldUserID)
	}
	if m.value != nil {
		fields = append(fields, entusername.FieldValue)
	}
	if m.created_at != nil {
		fields = append(fields, entusername.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, entusername.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, entusername.FieldDeleted)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntUserNameMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entusername.FieldUserID:
		return m.UserID()
	case entusername.FieldValue:
		return m.Value()
	case entusername.FieldCreatedAt:
		return m.CreatedAt()
	case entusername.FieldUpdatedAt:
		return m.UpdatedAt()
	case entusername.FieldDeleted:
		return m.Deleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntUserNameMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entusername.FieldUserID:
		return m.OldUserID(ctx)
	case entusername.FieldValue:
		return m.OldValue(ctx)
	case entusername.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case entusername.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case entusername.FieldDeleted:
		return m.OldDeleted(ctx)
	}
	return nil, fmt.Errorf("unknown EntUserName field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntUserNameMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entusername.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case entusername.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case entusername.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case entusername.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case entusername.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown EntUserName field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntUserNameMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntUserNameMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntUserNameMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EntUserName numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntUserNameMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntUserNameMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntUserNameMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EntUserName nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntUserNameMutation) ResetField(name string) error {
	switch name {
	case entusername.FieldUserID:
		m.ResetUserID()
		return nil
	case entusername.FieldValue:
		m.ResetValue()
		return nil
	case entusername.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case entusername.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case entusername.FieldDeleted:
		m.ResetDeleted()
		return nil
	}
	return fmt.Errorf("unknown EntUserName field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntUserNameMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ent_user != nil {
		edges = append(edges, entusername.EdgeEntUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntUserNameMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entusername.EdgeEntUser:
		if id := m.ent_user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntUserNameMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntUserNameMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntUserNameMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedent_user {
		edges = append(edges, entusername.EdgeEntUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntUserNameMutation) EdgeCleared(name string) bool {
	switch name {
	case entusername.EdgeEntUser:
		return m.clearedent_user
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntUserNameMutation) ClearEdge(name string) error {
	switch name {
	case entusername.EdgeEntUser:
		m.ClearEntUser()
		return nil
	}
	return fmt.Errorf("unknown EntUserName unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntUserNameMutation) ResetEdge(name string) error {
	switch name {
	case entusername.EdgeEntUser:
		m.ResetEntUser()
		return nil
	}
	return fmt.Errorf("unknown EntUserName edge %s", name)
}
