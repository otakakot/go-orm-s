// Code generated by ent, DO NOT EDIT.

package entuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the entuser type in the database.
	Label = "ent_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// EdgeEntUserNames holds the string denoting the ent_user_names edge name in mutations.
	EdgeEntUserNames = "ent_user_names"
	// Table holds the table name of the entuser in the database.
	Table = "ent_users"
	// EntUserNamesTable is the table that holds the ent_user_names relation/edge.
	EntUserNamesTable = "ent_user_names"
	// EntUserNamesInverseTable is the table name for the EntUserName entity.
	// It exists in this package in order to avoid circular dependency with the "entusername" package.
	EntUserNamesInverseTable = "ent_user_names"
	// EntUserNamesColumn is the table column denoting the ent_user_names relation/edge.
	EntUserNamesColumn = "user_id"
)

// Columns holds all SQL columns for entuser fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeleted,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeleted holds the default value on creation for the "deleted" field.
	DefaultDeleted bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the EntUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeleted orders the results by the deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}

// ByEntUserNamesCount orders the results by ent_user_names count.
func ByEntUserNamesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntUserNamesStep(), opts...)
	}
}

// ByEntUserNames orders the results by ent_user_names terms.
func ByEntUserNames(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntUserNamesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEntUserNamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntUserNamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EntUserNamesTable, EntUserNamesColumn),
	)
}
