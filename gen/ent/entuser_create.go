// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/otakakot/go-orm-s/gen/ent/entuser"
	"github.com/otakakot/go-orm-s/gen/ent/entusername"
)

// EntUserCreate is the builder for creating a EntUser entity.
type EntUserCreate struct {
	config
	mutation *EntUserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (euc *EntUserCreate) SetCreatedAt(t time.Time) *EntUserCreate {
	euc.mutation.SetCreatedAt(t)
	return euc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euc *EntUserCreate) SetNillableCreatedAt(t *time.Time) *EntUserCreate {
	if t != nil {
		euc.SetCreatedAt(*t)
	}
	return euc
}

// SetUpdatedAt sets the "updated_at" field.
func (euc *EntUserCreate) SetUpdatedAt(t time.Time) *EntUserCreate {
	euc.mutation.SetUpdatedAt(t)
	return euc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euc *EntUserCreate) SetNillableUpdatedAt(t *time.Time) *EntUserCreate {
	if t != nil {
		euc.SetUpdatedAt(*t)
	}
	return euc
}

// SetDeleted sets the "deleted" field.
func (euc *EntUserCreate) SetDeleted(b bool) *EntUserCreate {
	euc.mutation.SetDeleted(b)
	return euc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (euc *EntUserCreate) SetNillableDeleted(b *bool) *EntUserCreate {
	if b != nil {
		euc.SetDeleted(*b)
	}
	return euc
}

// SetID sets the "id" field.
func (euc *EntUserCreate) SetID(u uuid.UUID) *EntUserCreate {
	euc.mutation.SetID(u)
	return euc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (euc *EntUserCreate) SetNillableID(u *uuid.UUID) *EntUserCreate {
	if u != nil {
		euc.SetID(*u)
	}
	return euc
}

// AddEntUserNameIDs adds the "ent_user_names" edge to the EntUserName entity by IDs.
func (euc *EntUserCreate) AddEntUserNameIDs(ids ...uuid.UUID) *EntUserCreate {
	euc.mutation.AddEntUserNameIDs(ids...)
	return euc
}

// AddEntUserNames adds the "ent_user_names" edges to the EntUserName entity.
func (euc *EntUserCreate) AddEntUserNames(e ...*EntUserName) *EntUserCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddEntUserNameIDs(ids...)
}

// Mutation returns the EntUserMutation object of the builder.
func (euc *EntUserCreate) Mutation() *EntUserMutation {
	return euc.mutation
}

// Save creates the EntUser in the database.
func (euc *EntUserCreate) Save(ctx context.Context) (*EntUser, error) {
	euc.defaults()
	return withHooks(ctx, euc.sqlSave, euc.mutation, euc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (euc *EntUserCreate) SaveX(ctx context.Context) *EntUser {
	v, err := euc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (euc *EntUserCreate) Exec(ctx context.Context) error {
	_, err := euc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euc *EntUserCreate) ExecX(ctx context.Context) {
	if err := euc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euc *EntUserCreate) defaults() {
	if _, ok := euc.mutation.CreatedAt(); !ok {
		v := entuser.DefaultCreatedAt()
		euc.mutation.SetCreatedAt(v)
	}
	if _, ok := euc.mutation.UpdatedAt(); !ok {
		v := entuser.DefaultUpdatedAt()
		euc.mutation.SetUpdatedAt(v)
	}
	if _, ok := euc.mutation.Deleted(); !ok {
		v := entuser.DefaultDeleted
		euc.mutation.SetDeleted(v)
	}
	if _, ok := euc.mutation.ID(); !ok {
		v := entuser.DefaultID()
		euc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euc *EntUserCreate) check() error {
	if _, ok := euc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EntUser.created_at"`)}
	}
	if _, ok := euc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EntUser.updated_at"`)}
	}
	if _, ok := euc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "EntUser.deleted"`)}
	}
	return nil
}

func (euc *EntUserCreate) sqlSave(ctx context.Context) (*EntUser, error) {
	if err := euc.check(); err != nil {
		return nil, err
	}
	_node, _spec := euc.createSpec()
	if err := sqlgraph.CreateNode(ctx, euc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	euc.mutation.id = &_node.ID
	euc.mutation.done = true
	return _node, nil
}

func (euc *EntUserCreate) createSpec() (*EntUser, *sqlgraph.CreateSpec) {
	var (
		_node = &EntUser{config: euc.config}
		_spec = sqlgraph.NewCreateSpec(entuser.Table, sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeUUID))
	)
	if id, ok := euc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := euc.mutation.CreatedAt(); ok {
		_spec.SetField(entuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := euc.mutation.UpdatedAt(); ok {
		_spec.SetField(entuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := euc.mutation.Deleted(); ok {
		_spec.SetField(entuser.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if nodes := euc.mutation.EntUserNamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.EntUserNamesTable,
			Columns: []string{entuser.EntUserNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entusername.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntUserCreateBulk is the builder for creating many EntUser entities in bulk.
type EntUserCreateBulk struct {
	config
	builders []*EntUserCreate
}

// Save creates the EntUser entities in the database.
func (eucb *EntUserCreateBulk) Save(ctx context.Context) ([]*EntUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eucb.builders))
	nodes := make([]*EntUser, len(eucb.builders))
	mutators := make([]Mutator, len(eucb.builders))
	for i := range eucb.builders {
		func(i int, root context.Context) {
			builder := eucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eucb *EntUserCreateBulk) SaveX(ctx context.Context) []*EntUser {
	v, err := eucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eucb *EntUserCreateBulk) Exec(ctx context.Context) error {
	_, err := eucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eucb *EntUserCreateBulk) ExecX(ctx context.Context) {
	if err := eucb.Exec(ctx); err != nil {
		panic(err)
	}
}
