// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/otakakot/go-orm-s/gen/ent/entuser"
	"github.com/otakakot/go-orm-s/gen/ent/entusername"
	"github.com/otakakot/go-orm-s/gen/ent/predicate"
)

// EntUserNameQuery is the builder for querying EntUserName entities.
type EntUserNameQuery struct {
	config
	ctx         *QueryContext
	order       []entusername.OrderOption
	inters      []Interceptor
	predicates  []predicate.EntUserName
	withEntUser *EntUserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntUserNameQuery builder.
func (eunq *EntUserNameQuery) Where(ps ...predicate.EntUserName) *EntUserNameQuery {
	eunq.predicates = append(eunq.predicates, ps...)
	return eunq
}

// Limit the number of records to be returned by this query.
func (eunq *EntUserNameQuery) Limit(limit int) *EntUserNameQuery {
	eunq.ctx.Limit = &limit
	return eunq
}

// Offset to start from.
func (eunq *EntUserNameQuery) Offset(offset int) *EntUserNameQuery {
	eunq.ctx.Offset = &offset
	return eunq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eunq *EntUserNameQuery) Unique(unique bool) *EntUserNameQuery {
	eunq.ctx.Unique = &unique
	return eunq
}

// Order specifies how the records should be ordered.
func (eunq *EntUserNameQuery) Order(o ...entusername.OrderOption) *EntUserNameQuery {
	eunq.order = append(eunq.order, o...)
	return eunq
}

// QueryEntUser chains the current query on the "ent_user" edge.
func (eunq *EntUserNameQuery) QueryEntUser() *EntUserQuery {
	query := (&EntUserClient{config: eunq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eunq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eunq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entusername.Table, entusername.FieldID, selector),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entusername.EntUserTable, entusername.EntUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(eunq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EntUserName entity from the query.
// Returns a *NotFoundError when no EntUserName was found.
func (eunq *EntUserNameQuery) First(ctx context.Context) (*EntUserName, error) {
	nodes, err := eunq.Limit(1).All(setContextOp(ctx, eunq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{entusername.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eunq *EntUserNameQuery) FirstX(ctx context.Context) *EntUserName {
	node, err := eunq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EntUserName ID from the query.
// Returns a *NotFoundError when no EntUserName ID was found.
func (eunq *EntUserNameQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = eunq.Limit(1).IDs(setContextOp(ctx, eunq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{entusername.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eunq *EntUserNameQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := eunq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EntUserName entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EntUserName entity is found.
// Returns a *NotFoundError when no EntUserName entities are found.
func (eunq *EntUserNameQuery) Only(ctx context.Context) (*EntUserName, error) {
	nodes, err := eunq.Limit(2).All(setContextOp(ctx, eunq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{entusername.Label}
	default:
		return nil, &NotSingularError{entusername.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eunq *EntUserNameQuery) OnlyX(ctx context.Context) *EntUserName {
	node, err := eunq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EntUserName ID in the query.
// Returns a *NotSingularError when more than one EntUserName ID is found.
// Returns a *NotFoundError when no entities are found.
func (eunq *EntUserNameQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = eunq.Limit(2).IDs(setContextOp(ctx, eunq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{entusername.Label}
	default:
		err = &NotSingularError{entusername.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eunq *EntUserNameQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := eunq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EntUserNames.
func (eunq *EntUserNameQuery) All(ctx context.Context) ([]*EntUserName, error) {
	ctx = setContextOp(ctx, eunq.ctx, "All")
	if err := eunq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EntUserName, *EntUserNameQuery]()
	return withInterceptors[[]*EntUserName](ctx, eunq, qr, eunq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eunq *EntUserNameQuery) AllX(ctx context.Context) []*EntUserName {
	nodes, err := eunq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EntUserName IDs.
func (eunq *EntUserNameQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if eunq.ctx.Unique == nil && eunq.path != nil {
		eunq.Unique(true)
	}
	ctx = setContextOp(ctx, eunq.ctx, "IDs")
	if err = eunq.Select(entusername.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eunq *EntUserNameQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := eunq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eunq *EntUserNameQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eunq.ctx, "Count")
	if err := eunq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eunq, querierCount[*EntUserNameQuery](), eunq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eunq *EntUserNameQuery) CountX(ctx context.Context) int {
	count, err := eunq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eunq *EntUserNameQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eunq.ctx, "Exist")
	switch _, err := eunq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eunq *EntUserNameQuery) ExistX(ctx context.Context) bool {
	exist, err := eunq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntUserNameQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eunq *EntUserNameQuery) Clone() *EntUserNameQuery {
	if eunq == nil {
		return nil
	}
	return &EntUserNameQuery{
		config:      eunq.config,
		ctx:         eunq.ctx.Clone(),
		order:       append([]entusername.OrderOption{}, eunq.order...),
		inters:      append([]Interceptor{}, eunq.inters...),
		predicates:  append([]predicate.EntUserName{}, eunq.predicates...),
		withEntUser: eunq.withEntUser.Clone(),
		// clone intermediate query.
		sql:  eunq.sql.Clone(),
		path: eunq.path,
	}
}

// WithEntUser tells the query-builder to eager-load the nodes that are connected to
// the "ent_user" edge. The optional arguments are used to configure the query builder of the edge.
func (eunq *EntUserNameQuery) WithEntUser(opts ...func(*EntUserQuery)) *EntUserNameQuery {
	query := (&EntUserClient{config: eunq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eunq.withEntUser = query
	return eunq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EntUserName.Query().
//		GroupBy(entusername.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eunq *EntUserNameQuery) GroupBy(field string, fields ...string) *EntUserNameGroupBy {
	eunq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EntUserNameGroupBy{build: eunq}
	grbuild.flds = &eunq.ctx.Fields
	grbuild.label = entusername.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//	}
//
//	client.EntUserName.Query().
//		Select(entusername.FieldUserID).
//		Scan(ctx, &v)
func (eunq *EntUserNameQuery) Select(fields ...string) *EntUserNameSelect {
	eunq.ctx.Fields = append(eunq.ctx.Fields, fields...)
	sbuild := &EntUserNameSelect{EntUserNameQuery: eunq}
	sbuild.label = entusername.Label
	sbuild.flds, sbuild.scan = &eunq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EntUserNameSelect configured with the given aggregations.
func (eunq *EntUserNameQuery) Aggregate(fns ...AggregateFunc) *EntUserNameSelect {
	return eunq.Select().Aggregate(fns...)
}

func (eunq *EntUserNameQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eunq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eunq); err != nil {
				return err
			}
		}
	}
	for _, f := range eunq.ctx.Fields {
		if !entusername.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eunq.path != nil {
		prev, err := eunq.path(ctx)
		if err != nil {
			return err
		}
		eunq.sql = prev
	}
	return nil
}

func (eunq *EntUserNameQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EntUserName, error) {
	var (
		nodes       = []*EntUserName{}
		_spec       = eunq.querySpec()
		loadedTypes = [1]bool{
			eunq.withEntUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EntUserName).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EntUserName{config: eunq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eunq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eunq.withEntUser; query != nil {
		if err := eunq.loadEntUser(ctx, query, nodes, nil,
			func(n *EntUserName, e *EntUser) { n.Edges.EntUser = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eunq *EntUserNameQuery) loadEntUser(ctx context.Context, query *EntUserQuery, nodes []*EntUserName, init func(*EntUserName), assign func(*EntUserName, *EntUser)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*EntUserName)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(entuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eunq *EntUserNameQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eunq.querySpec()
	_spec.Node.Columns = eunq.ctx.Fields
	if len(eunq.ctx.Fields) > 0 {
		_spec.Unique = eunq.ctx.Unique != nil && *eunq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eunq.driver, _spec)
}

func (eunq *EntUserNameQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(entusername.Table, entusername.Columns, sqlgraph.NewFieldSpec(entusername.FieldID, field.TypeUUID))
	_spec.From = eunq.sql
	if unique := eunq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eunq.path != nil {
		_spec.Unique = true
	}
	if fields := eunq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entusername.FieldID)
		for i := range fields {
			if fields[i] != entusername.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eunq.withEntUser != nil {
			_spec.Node.AddColumnOnce(entusername.FieldUserID)
		}
	}
	if ps := eunq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eunq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eunq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eunq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eunq *EntUserNameQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eunq.driver.Dialect())
	t1 := builder.Table(entusername.Table)
	columns := eunq.ctx.Fields
	if len(columns) == 0 {
		columns = entusername.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eunq.sql != nil {
		selector = eunq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eunq.ctx.Unique != nil && *eunq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eunq.predicates {
		p(selector)
	}
	for _, p := range eunq.order {
		p(selector)
	}
	if offset := eunq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eunq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EntUserNameGroupBy is the group-by builder for EntUserName entities.
type EntUserNameGroupBy struct {
	selector
	build *EntUserNameQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eungb *EntUserNameGroupBy) Aggregate(fns ...AggregateFunc) *EntUserNameGroupBy {
	eungb.fns = append(eungb.fns, fns...)
	return eungb
}

// Scan applies the selector query and scans the result into the given value.
func (eungb *EntUserNameGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eungb.build.ctx, "GroupBy")
	if err := eungb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntUserNameQuery, *EntUserNameGroupBy](ctx, eungb.build, eungb, eungb.build.inters, v)
}

func (eungb *EntUserNameGroupBy) sqlScan(ctx context.Context, root *EntUserNameQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eungb.fns))
	for _, fn := range eungb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eungb.flds)+len(eungb.fns))
		for _, f := range *eungb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eungb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eungb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EntUserNameSelect is the builder for selecting fields of EntUserName entities.
type EntUserNameSelect struct {
	*EntUserNameQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (euns *EntUserNameSelect) Aggregate(fns ...AggregateFunc) *EntUserNameSelect {
	euns.fns = append(euns.fns, fns...)
	return euns
}

// Scan applies the selector query and scans the result into the given value.
func (euns *EntUserNameSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, euns.ctx, "Select")
	if err := euns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntUserNameQuery, *EntUserNameSelect](ctx, euns.EntUserNameQuery, euns, euns.inters, v)
}

func (euns *EntUserNameSelect) sqlScan(ctx context.Context, root *EntUserNameQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(euns.fns))
	for _, fn := range euns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*euns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := euns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
