// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/otakakot/go-orm-s/gen/ent/entuser"
	"github.com/otakakot/go-orm-s/gen/ent/entusername"
	"github.com/otakakot/go-orm-s/gen/ent/predicate"
)

// EntUserUpdate is the builder for updating EntUser entities.
type EntUserUpdate struct {
	config
	hooks    []Hook
	mutation *EntUserMutation
}

// Where appends a list predicates to the EntUserUpdate builder.
func (euu *EntUserUpdate) Where(ps ...predicate.EntUser) *EntUserUpdate {
	euu.mutation.Where(ps...)
	return euu
}

// SetCreatedAt sets the "created_at" field.
func (euu *EntUserUpdate) SetCreatedAt(t time.Time) *EntUserUpdate {
	euu.mutation.SetCreatedAt(t)
	return euu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euu *EntUserUpdate) SetNillableCreatedAt(t *time.Time) *EntUserUpdate {
	if t != nil {
		euu.SetCreatedAt(*t)
	}
	return euu
}

// SetUpdatedAt sets the "updated_at" field.
func (euu *EntUserUpdate) SetUpdatedAt(t time.Time) *EntUserUpdate {
	euu.mutation.SetUpdatedAt(t)
	return euu
}

// SetDeleted sets the "deleted" field.
func (euu *EntUserUpdate) SetDeleted(b bool) *EntUserUpdate {
	euu.mutation.SetDeleted(b)
	return euu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (euu *EntUserUpdate) SetNillableDeleted(b *bool) *EntUserUpdate {
	if b != nil {
		euu.SetDeleted(*b)
	}
	return euu
}

// AddEntUserNameIDs adds the "ent_user_names" edge to the EntUserName entity by IDs.
func (euu *EntUserUpdate) AddEntUserNameIDs(ids ...uuid.UUID) *EntUserUpdate {
	euu.mutation.AddEntUserNameIDs(ids...)
	return euu
}

// AddEntUserNames adds the "ent_user_names" edges to the EntUserName entity.
func (euu *EntUserUpdate) AddEntUserNames(e ...*EntUserName) *EntUserUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddEntUserNameIDs(ids...)
}

// Mutation returns the EntUserMutation object of the builder.
func (euu *EntUserUpdate) Mutation() *EntUserMutation {
	return euu.mutation
}

// ClearEntUserNames clears all "ent_user_names" edges to the EntUserName entity.
func (euu *EntUserUpdate) ClearEntUserNames() *EntUserUpdate {
	euu.mutation.ClearEntUserNames()
	return euu
}

// RemoveEntUserNameIDs removes the "ent_user_names" edge to EntUserName entities by IDs.
func (euu *EntUserUpdate) RemoveEntUserNameIDs(ids ...uuid.UUID) *EntUserUpdate {
	euu.mutation.RemoveEntUserNameIDs(ids...)
	return euu
}

// RemoveEntUserNames removes "ent_user_names" edges to EntUserName entities.
func (euu *EntUserUpdate) RemoveEntUserNames(e ...*EntUserName) *EntUserUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveEntUserNameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (euu *EntUserUpdate) Save(ctx context.Context) (int, error) {
	euu.defaults()
	return withHooks(ctx, euu.sqlSave, euu.mutation, euu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euu *EntUserUpdate) SaveX(ctx context.Context) int {
	affected, err := euu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (euu *EntUserUpdate) Exec(ctx context.Context) error {
	_, err := euu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euu *EntUserUpdate) ExecX(ctx context.Context) {
	if err := euu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euu *EntUserUpdate) defaults() {
	if _, ok := euu.mutation.UpdatedAt(); !ok {
		v := entuser.UpdateDefaultUpdatedAt()
		euu.mutation.SetUpdatedAt(v)
	}
}

func (euu *EntUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entuser.Table, entuser.Columns, sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeUUID))
	if ps := euu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euu.mutation.CreatedAt(); ok {
		_spec.SetField(entuser.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euu.mutation.UpdatedAt(); ok {
		_spec.SetField(entuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euu.mutation.Deleted(); ok {
		_spec.SetField(entuser.FieldDeleted, field.TypeBool, value)
	}
	if euu.mutation.EntUserNamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.EntUserNamesTable,
			Columns: []string{entuser.EntUserNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entusername.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedEntUserNamesIDs(); len(nodes) > 0 && !euu.mutation.EntUserNamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.EntUserNamesTable,
			Columns: []string{entuser.EntUserNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entusername.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.EntUserNamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.EntUserNamesTable,
			Columns: []string{entuser.EntUserNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entusername.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, euu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	euu.mutation.done = true
	return n, nil
}

// EntUserUpdateOne is the builder for updating a single EntUser entity.
type EntUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntUserMutation
}

// SetCreatedAt sets the "created_at" field.
func (euuo *EntUserUpdateOne) SetCreatedAt(t time.Time) *EntUserUpdateOne {
	euuo.mutation.SetCreatedAt(t)
	return euuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euuo *EntUserUpdateOne) SetNillableCreatedAt(t *time.Time) *EntUserUpdateOne {
	if t != nil {
		euuo.SetCreatedAt(*t)
	}
	return euuo
}

// SetUpdatedAt sets the "updated_at" field.
func (euuo *EntUserUpdateOne) SetUpdatedAt(t time.Time) *EntUserUpdateOne {
	euuo.mutation.SetUpdatedAt(t)
	return euuo
}

// SetDeleted sets the "deleted" field.
func (euuo *EntUserUpdateOne) SetDeleted(b bool) *EntUserUpdateOne {
	euuo.mutation.SetDeleted(b)
	return euuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (euuo *EntUserUpdateOne) SetNillableDeleted(b *bool) *EntUserUpdateOne {
	if b != nil {
		euuo.SetDeleted(*b)
	}
	return euuo
}

// AddEntUserNameIDs adds the "ent_user_names" edge to the EntUserName entity by IDs.
func (euuo *EntUserUpdateOne) AddEntUserNameIDs(ids ...uuid.UUID) *EntUserUpdateOne {
	euuo.mutation.AddEntUserNameIDs(ids...)
	return euuo
}

// AddEntUserNames adds the "ent_user_names" edges to the EntUserName entity.
func (euuo *EntUserUpdateOne) AddEntUserNames(e ...*EntUserName) *EntUserUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddEntUserNameIDs(ids...)
}

// Mutation returns the EntUserMutation object of the builder.
func (euuo *EntUserUpdateOne) Mutation() *EntUserMutation {
	return euuo.mutation
}

// ClearEntUserNames clears all "ent_user_names" edges to the EntUserName entity.
func (euuo *EntUserUpdateOne) ClearEntUserNames() *EntUserUpdateOne {
	euuo.mutation.ClearEntUserNames()
	return euuo
}

// RemoveEntUserNameIDs removes the "ent_user_names" edge to EntUserName entities by IDs.
func (euuo *EntUserUpdateOne) RemoveEntUserNameIDs(ids ...uuid.UUID) *EntUserUpdateOne {
	euuo.mutation.RemoveEntUserNameIDs(ids...)
	return euuo
}

// RemoveEntUserNames removes "ent_user_names" edges to EntUserName entities.
func (euuo *EntUserUpdateOne) RemoveEntUserNames(e ...*EntUserName) *EntUserUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveEntUserNameIDs(ids...)
}

// Where appends a list predicates to the EntUserUpdate builder.
func (euuo *EntUserUpdateOne) Where(ps ...predicate.EntUser) *EntUserUpdateOne {
	euuo.mutation.Where(ps...)
	return euuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euuo *EntUserUpdateOne) Select(field string, fields ...string) *EntUserUpdateOne {
	euuo.fields = append([]string{field}, fields...)
	return euuo
}

// Save executes the query and returns the updated EntUser entity.
func (euuo *EntUserUpdateOne) Save(ctx context.Context) (*EntUser, error) {
	euuo.defaults()
	return withHooks(ctx, euuo.sqlSave, euuo.mutation, euuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euuo *EntUserUpdateOne) SaveX(ctx context.Context) *EntUser {
	node, err := euuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euuo *EntUserUpdateOne) Exec(ctx context.Context) error {
	_, err := euuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euuo *EntUserUpdateOne) ExecX(ctx context.Context) {
	if err := euuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euuo *EntUserUpdateOne) defaults() {
	if _, ok := euuo.mutation.UpdatedAt(); !ok {
		v := entuser.UpdateDefaultUpdatedAt()
		euuo.mutation.SetUpdatedAt(v)
	}
}

func (euuo *EntUserUpdateOne) sqlSave(ctx context.Context) (_node *EntUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(entuser.Table, entuser.Columns, sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeUUID))
	id, ok := euuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entuser.FieldID)
		for _, f := range fields {
			if !entuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euuo.mutation.CreatedAt(); ok {
		_spec.SetField(entuser.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euuo.mutation.UpdatedAt(); ok {
		_spec.SetField(entuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euuo.mutation.Deleted(); ok {
		_spec.SetField(entuser.FieldDeleted, field.TypeBool, value)
	}
	if euuo.mutation.EntUserNamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.EntUserNamesTable,
			Columns: []string{entuser.EntUserNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entusername.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedEntUserNamesIDs(); len(nodes) > 0 && !euuo.mutation.EntUserNamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.EntUserNamesTable,
			Columns: []string{entuser.EntUserNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entusername.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.EntUserNamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.EntUserNamesTable,
			Columns: []string{entuser.EntUserNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entusername.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EntUser{config: euuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euuo.mutation.done = true
	return _node, nil
}
