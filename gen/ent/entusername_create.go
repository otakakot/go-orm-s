// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/otakakot/go-orm-s/gen/ent/entuser"
	"github.com/otakakot/go-orm-s/gen/ent/entusername"
)

// EntUserNameCreate is the builder for creating a EntUserName entity.
type EntUserNameCreate struct {
	config
	mutation *EntUserNameMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (eunc *EntUserNameCreate) SetUserID(u uuid.UUID) *EntUserNameCreate {
	eunc.mutation.SetUserID(u)
	return eunc
}

// SetValue sets the "value" field.
func (eunc *EntUserNameCreate) SetValue(s string) *EntUserNameCreate {
	eunc.mutation.SetValue(s)
	return eunc
}

// SetCreatedAt sets the "created_at" field.
func (eunc *EntUserNameCreate) SetCreatedAt(t time.Time) *EntUserNameCreate {
	eunc.mutation.SetCreatedAt(t)
	return eunc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eunc *EntUserNameCreate) SetNillableCreatedAt(t *time.Time) *EntUserNameCreate {
	if t != nil {
		eunc.SetCreatedAt(*t)
	}
	return eunc
}

// SetUpdatedAt sets the "updated_at" field.
func (eunc *EntUserNameCreate) SetUpdatedAt(t time.Time) *EntUserNameCreate {
	eunc.mutation.SetUpdatedAt(t)
	return eunc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eunc *EntUserNameCreate) SetNillableUpdatedAt(t *time.Time) *EntUserNameCreate {
	if t != nil {
		eunc.SetUpdatedAt(*t)
	}
	return eunc
}

// SetDeleted sets the "deleted" field.
func (eunc *EntUserNameCreate) SetDeleted(b bool) *EntUserNameCreate {
	eunc.mutation.SetDeleted(b)
	return eunc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (eunc *EntUserNameCreate) SetNillableDeleted(b *bool) *EntUserNameCreate {
	if b != nil {
		eunc.SetDeleted(*b)
	}
	return eunc
}

// SetID sets the "id" field.
func (eunc *EntUserNameCreate) SetID(u uuid.UUID) *EntUserNameCreate {
	eunc.mutation.SetID(u)
	return eunc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (eunc *EntUserNameCreate) SetNillableID(u *uuid.UUID) *EntUserNameCreate {
	if u != nil {
		eunc.SetID(*u)
	}
	return eunc
}

// SetEntUserID sets the "ent_user" edge to the EntUser entity by ID.
func (eunc *EntUserNameCreate) SetEntUserID(id uuid.UUID) *EntUserNameCreate {
	eunc.mutation.SetEntUserID(id)
	return eunc
}

// SetEntUser sets the "ent_user" edge to the EntUser entity.
func (eunc *EntUserNameCreate) SetEntUser(e *EntUser) *EntUserNameCreate {
	return eunc.SetEntUserID(e.ID)
}

// Mutation returns the EntUserNameMutation object of the builder.
func (eunc *EntUserNameCreate) Mutation() *EntUserNameMutation {
	return eunc.mutation
}

// Save creates the EntUserName in the database.
func (eunc *EntUserNameCreate) Save(ctx context.Context) (*EntUserName, error) {
	eunc.defaults()
	return withHooks(ctx, eunc.sqlSave, eunc.mutation, eunc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eunc *EntUserNameCreate) SaveX(ctx context.Context) *EntUserName {
	v, err := eunc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eunc *EntUserNameCreate) Exec(ctx context.Context) error {
	_, err := eunc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eunc *EntUserNameCreate) ExecX(ctx context.Context) {
	if err := eunc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eunc *EntUserNameCreate) defaults() {
	if _, ok := eunc.mutation.CreatedAt(); !ok {
		v := entusername.DefaultCreatedAt()
		eunc.mutation.SetCreatedAt(v)
	}
	if _, ok := eunc.mutation.UpdatedAt(); !ok {
		v := entusername.DefaultUpdatedAt()
		eunc.mutation.SetUpdatedAt(v)
	}
	if _, ok := eunc.mutation.Deleted(); !ok {
		v := entusername.DefaultDeleted
		eunc.mutation.SetDeleted(v)
	}
	if _, ok := eunc.mutation.ID(); !ok {
		v := entusername.DefaultID()
		eunc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eunc *EntUserNameCreate) check() error {
	if _, ok := eunc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "EntUserName.user_id"`)}
	}
	if _, ok := eunc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "EntUserName.value"`)}
	}
	if _, ok := eunc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EntUserName.created_at"`)}
	}
	if _, ok := eunc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EntUserName.updated_at"`)}
	}
	if _, ok := eunc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "EntUserName.deleted"`)}
	}
	if _, ok := eunc.mutation.EntUserID(); !ok {
		return &ValidationError{Name: "ent_user", err: errors.New(`ent: missing required edge "EntUserName.ent_user"`)}
	}
	return nil
}

func (eunc *EntUserNameCreate) sqlSave(ctx context.Context) (*EntUserName, error) {
	if err := eunc.check(); err != nil {
		return nil, err
	}
	_node, _spec := eunc.createSpec()
	if err := sqlgraph.CreateNode(ctx, eunc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	eunc.mutation.id = &_node.ID
	eunc.mutation.done = true
	return _node, nil
}

func (eunc *EntUserNameCreate) createSpec() (*EntUserName, *sqlgraph.CreateSpec) {
	var (
		_node = &EntUserName{config: eunc.config}
		_spec = sqlgraph.NewCreateSpec(entusername.Table, sqlgraph.NewFieldSpec(entusername.FieldID, field.TypeUUID))
	)
	if id, ok := eunc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := eunc.mutation.Value(); ok {
		_spec.SetField(entusername.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := eunc.mutation.CreatedAt(); ok {
		_spec.SetField(entusername.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := eunc.mutation.UpdatedAt(); ok {
		_spec.SetField(entusername.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := eunc.mutation.Deleted(); ok {
		_spec.SetField(entusername.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if nodes := eunc.mutation.EntUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entusername.EntUserTable,
			Columns: []string{entusername.EntUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntUserNameCreateBulk is the builder for creating many EntUserName entities in bulk.
type EntUserNameCreateBulk struct {
	config
	builders []*EntUserNameCreate
}

// Save creates the EntUserName entities in the database.
func (euncb *EntUserNameCreateBulk) Save(ctx context.Context) ([]*EntUserName, error) {
	specs := make([]*sqlgraph.CreateSpec, len(euncb.builders))
	nodes := make([]*EntUserName, len(euncb.builders))
	mutators := make([]Mutator, len(euncb.builders))
	for i := range euncb.builders {
		func(i int, root context.Context) {
			builder := euncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntUserNameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, euncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, euncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, euncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (euncb *EntUserNameCreateBulk) SaveX(ctx context.Context) []*EntUserName {
	v, err := euncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (euncb *EntUserNameCreateBulk) Exec(ctx context.Context) error {
	_, err := euncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euncb *EntUserNameCreateBulk) ExecX(ctx context.Context) {
	if err := euncb.Exec(ctx); err != nil {
		panic(err)
	}
}
